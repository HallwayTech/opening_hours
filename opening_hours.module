<?php
/**
 * @file
 * Opening hours module.
 */

/**
 * Implements hook_menu().
 */
function opening_hours_menu() {
  $include_path = drupal_get_path('module', 'opening_hours') . '/includes';
  $items = array();

  $items['node/%node/opening_hours'] = array(
    'title' => 'Opening hours',
    'page callback' => 'opening_hours_node_edit_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('edit opening hours for content'),
    'weight' => 3,
    'file' => 'opening_hours.pages.inc',
    'file path' => $include_path,
    'type' => MENU_LOCAL_TASK,
  );

  $items['opening_hours/instances'] = array(
    'page callback' => 'opening_hours_crud_api_page',
    'access callback' => TRUE,
    'file' => 'opening_hours.pages.inc',
    'file path' => $include_path,
    'type' => MENU_CALLBACK,
  );

  $items['opening_hours/instances/%opening_hours_instance'] = array(
    'page callback' => 'opening_hours_instance_id_api_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('edit opening hours for content'),
    'file' => 'opening_hours.pages.inc',
    'file path' => $include_path,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * We add our own fieldset to the node settings form, so the user can
 * enable opening hours for a node type there.
 */
function opening_hours_form_node_type_form_alter(&$form, &$form_state) {
  $form['opening_hours'] = array(
    '#type' => 'fieldset',
    '#title' => t('Opening hours'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['opening_hours']['opening_hours_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable opening hours for this content type'),
    '#default_value' => variable_get('opening_hours_enabled_' . $form['#node_type']->type, FALSE),
  );
}

/**
 * Implements hook_perm().
 */
function opening_hours_perm() {
  return array(
    'edit opening hours for content',
  );
}

/**
 * Implements hook_theme().
 */
function opening_hours_theme($existing, $type, $theme, $path) {
  return array(
    'opening_hours_admin' => array(
      'arguments' => array(),
      'path' => $path . '/templates',
      'template' => 'opening_hours_admin',
    ),
  );
}

/**
 * Implements of hook_admin_theme().
 */
function opening_hours_admin_theme_options($op = 'info', $option = NULL) {
  switch ($op) {
    case 'info':
      return array('opening_hours' => array(
        'title' => t('Opening hours'),
        'description' => t('Use the administration theme when administering the opening hours calender.'),
      ));
    case 'check':
      return ($option == 'opening_hours' && arg(0) == 'node' && arg(2) == 'opening_hours');
  }
}

/**
 * Load opening hours instance by id.
 */
function opening_hours_instance_load($instance_id) {
  $query = db_query("SELECT * FROM opening_hours WHERE instance_id = %d LIMIT 1", array(
    ':id' => $instance_id,
  ));

  if ($row = db_fetch_object($query)) {
    return opening_hours_instance_prepare($row);
  }

  return FALSE;
}

/**
 * Load opening hours instances by nid and date.
 */
function opening_hours_instance_load_multiple($nid, $from_date, $to_date) {
  $query = db_query("
    SELECT * FROM opening_hours WHERE nid = %d AND date BETWEEN '%s' AND '%s'
  ", array(
    ':nid' => $nid,
    ':from_date' => $from_date,
    ':to_date' => $to_date,
  ));

  $results = array();
  while ($row = db_fetch_object($query)) {
    $results[] = opening_hours_instance_prepare($row);
  }

  return $results;
}

/**
 * Prepare an instance object loaded from the database for use with Backbone.
 */
function opening_hours_instance_prepare($instance) {
  // Cast integers to the correct type.
  $instance->instance_id = (integer) $instance->instance_id;
  $instance->nid = (integer) $instance->nid;
  $instance->original_instance_id = (!empty($instance->original_instance_id)) ? (integer) $instance->original_instance_id : NULL;

  // Backbone expects the primary key to be named `id`. Let's not disappoint.
  $instance->id = $instance->instance_id;

  return $instance;
}

/**
 * Helper function to load our JavaScript dependencies.
 */
function opening_hours_add_js($type = 'presentation', $nid = FALSE) {
  $files = array('opening_hours.base.js');
  $settings = array(
    'firstDayOfWeek' => (integer) variable_get('date_first_day', 1),
    // Options for the jQuery UI datepicker date formatter.
    'formatDate' => array(
      'monthNames' => array(
        t('January'),
        t('February'),
        t('March'),
        t('April'),
        t('May'),
        t('June'),
        t('July'),
        t('August'),
        t('September'),
        t('October'),
        t('November'),
        t('December'),
      ),
      'dayNames' => array(
        t('Sunday'),
        t('Monday'),
        t('Tuesday'),
        t('Wednesday'),
        t('Thursday'),
        t('Friday'),
        t('Saturday'),
      ),
    ),
  );

  // We need the datepicker plugin for formatting and selecting dates.
  date_popup_load();
  if ($type == 'admin') {
    // We use jQuery UI dialogs for editing opening hours.
    jquery_ui_add('ui.dialog');

    // If jQuery Update is configured to use development versions of
    // jQuery, it's probably safe to assume that we want development
    // versions of Backbone and Underscore. 
    if (variable_get('jquery_update_compression_type') == 'none') {
      $files[] = 'underscore.js';
      $files[] = 'backbone.js';
    }
    else {
      $files[] = 'underscore-min.js';
      $files[] = 'backbone-min.js';
    }

    $files[] = 'opening_hours.models.js';
    $files[] = 'opening_hours.collections.js';
    $files[] = 'opening_hours.views.js';
    $files[] = 'opening_hours.routers.js';
    $files[] = 'opening_hours.admin.js';

    // For the admin page, we need the node ID, passed from the page callback.
    $settings['nid'] = $nid;
    $settings['path'] = base_path() . drupal_get_path('module', 'opening_hours');
  }
  elseif ($type == 'presentation') {
    $files[] = 'opening_hours.presentation.js';
  }

  $path = drupal_get_path('module', 'opening_hours');

  foreach ($files as $filename) {
    drupal_add_js($path . '/js/' . $filename);
  }

  drupal_add_js(array('OpeningHours' => $settings), 'setting');
}

